1.2.3
Moved qumbia-plugins/cumbia-multiread and its qumultireaderplugininterface.h interface definition to a separate project:
( https://github.com/ELETTRA-SincrotroneTrieste/cumbia-multiread-plugin )

a. cumbia-http: fixes
b. qumbia-plugins/qt-designer/cucontrolsplugin.cpp: fixed target dialog list widget



1.2.2
Fixed incorrect behavior of right click menu - Link stats

v.1.2.0
a. cumbia-tango
a1. Database access integration into readers with specific source syntax

b. qumbia-apps
b1. cumbia reader: support for Tango database readers
b2. qumbiaprojectwizard: support for automatic engine detection
b3. quapps: offers a quapps.pri project include files to design multi engine apps
    that can be run from everywhere
b4. qumbiaprojectwizard: a multi-engine version of the application is created upon migration from QTango

v1.1.2
a. cumbia
a1. CumbiaPool: removed printf when no implementation is found and improved doc
a2. Support for cross compilation with emscripten / wasm

b. cumbia-qtcontrols
b1. CuControlsFactoryPool: NULL replaced with nullptr.
b2. A QuReplaceWildcards_I definition has been introduced to provide an interface for command line *replace wildcards* capable
    engines.
b3. Support for cross compilation with emscripten / wasm

c. qumbia-apps
c1. qumbia-read: support for websocket

c2. qumbiaprojectwizard:
c2.1 fixed $APPLICATION_NAME$" and "$ORGANIZATION_NAME$" placeholder replacement
c2.2 multi-engine is the default option and the templates create a skeleton including cumbia-random and cumbia-websocket modules,
     if available. cumbia-websocket is added only if a proper command line option is detected. QCommandLineParser is used to find
     the required option to activate cumbia-websocket connection

d. cumbia-websocket
d1. added support for a full-duplex communication with generic server on a single web socket.
    Former support to canoned (pwma) server is maintained and selected if an http url is provided
    to the constructor alongside the websocket URL.
d2. d1. can be tested using the simple https://github.com/ELETTRA-SincrotroneTrieste/cumbia-websocket-proxy-server.git
    websocket server "proxy"
d3. added support for command line argument wildcard replacement for tango by an implementation of QuReplaceWildcards_I

e. qumbia-tango-controls
e1. cutcontrols-utils:  CuTangoReplaceWildcards implementation of the QuReplaceWildcards_I interface is used to perform
    command line arguments wildcard replacement

v1.1.1
a. cumbia
a1. CuVariant
a1.1 added constructors and conversion functions for the additional data types:
     - long long int
     - long long unsigned int
     - std::vector<void *>
a1.2 added the append() method that converts the content of a CuVariant into a vector
     type and appends the value of another variant to this variant

b. cumbia-epics
b1. cuepics-world: src patterns regexp is more specialized

c. cumbia-qtcontrols
c1. cumbia-qtcontrols/src/qutable.cpp cumbia-qtcontrols/src/qucheckbox.cpp need include QContextMenuEvent
c2. quplot_base: added us_to_ms method that converts a vector of timestamp in microseconds to
    milliseconds.
c3. qutrendplot: uses the key "time_scale_us" to insert chunks of data (x: array of timestamps,
    y: array of data) into the plot. Useful to accept data from cumbia-historicaldb plugin.

d. qumbia-apps
d1. qumbia-reader: initial support for hdb++

v1.1.0

LIBRARY NEWS

* cumbia
Version 1.1.0 allows the application developer to customize how threads are grouped together, as well
as to define an upper limit on their number.
Additionally, timers in polled reads can be reused in order to limit timer threads.

* cumbia-random
cumbia-random has been expanded in order to offer great flexibility to accurately test higher level cumbia modules
and applications. Source names alone can specify how data is generated, threads grouped and much more. JavaScript
functions in .js files can be set as source of data for the cumbia-random module.

APP NEWS
qumbia-apps/cumbiareader has been deeply expanded in order to support the cumbia-random module and a
great number of command line options.
Coupled with the qumbia-tango-findsrc-plugin and the qumbia-tango-find-src app, that can be installed from
https://github.com/ELETTRA-SincrotroneTrieste/qumbia-tango-findsrc-plugin.git
it provides Tango sources auto completion on the command line.

Requires c++17

a. cumbia-tango
a1. CuPoller, CuPollingActivity: CuPoller::m_do_unregisterAction: removed wrong call to
    unregisterActivity that lead to a potential delay upon source disconnection as long as
    the timer timeout. CuPollingActivity::m_unregisterAction gets a reference to its thread
    and unregisters itself when no more in charge of any action.
a2. CuTangoWorld::get_properties: added support for wildcards when searching device properties.
    CuTangoWorld::get_properties: added Tango class property list for a given class name

b. qumbia-apps/qumbia-client: use setOptions before setSource to connect to a source according
   to the refresh mode and period options on the user interface.

c. cumbia
c1. CuTimerService allows to limit the number of timers used by the application.
c2. A limit on the number of threads created by activities can be set, as well as a custom thread token allows
    the user to group threads
c3. C++17 shared_locks replace unique locks where the protected variables are only read


d. cumbia-qtcontrols
d1. cupluginloader provides a template method to directly get the desired plugin CuPluginLoader::get
d2. qulabelbase.cpp: wordwrap no more set to true by default. Fixed size-hint related methods
d3. qutrendplot.cpp, quplotcurve: custom notes can be set on arbitrary curve points. They are indicated by red circles
    and the marker shows the text of the note. Signals added to notify marker visible / hidden and marker text changed.
    Custom notes store error messages for trend plots and can be used by the historical database plugin to mark the points where
    errors occurred.
d4. quinputoutput.cpp: fixed crash when configuration is valid but no "value" is set on the data bundle (e.g. read attribute
    fails while get_attribute_config is ok)
d5. qucirculargauge.cpp: fix preventing label to keep displaying error message "####" after a previously broken connection is restored
d6. qucirculargauge.cpp: added labelErrorText property to provide an alternative text to "####" as error indication

e. cumbia-random

Library has been expanded to support several new operations for testing purposes.
The source name can define group threading, period, size of generated data, minimum, maximum and period.
The source can specify a JavaScript file to generate data from a custom function
e1. enabled in scripts/cubuild.sh

f. qumbia-apps/cumbiareader moved to qumbia-apps/qumbia-reader
f1. support for cumbia-random
f2. in combination with the qumbia-tango-findsrc-plugin + qumbia-tango-find-src app, Tango sources auto completion
    is available.
f3. improved output formatting
f4. improved options from command line (single shot, read x times and quit...)
f5. support for Tango database properties (device, attribute, class)

g. External new plugin qumbia-tango-findsrc-plugin + qumbia-tango-find-src app:
   https://github.com/ELETTRA-SincrotroneTrieste/qumbia-tango-findsrc-plugin.git
   Finds the name of a Tango source (attribute or command) from a partial name.
   Can be used for auto completion of Tango sources.

h. qumbia-tango-controls
h1. added interface qutfindsrcsplugini.h for the qumbia-tango-findsrc-plugin (see g.)

i. qumbia-apps/cumbia/cumbia shell script for "cumbia" command line shortcuts
i1. support for cumbiareader (cumbia read)
i2. qumbia-apps/cumbia/bash_completion.d/cumbia: completion for cumbia read

l. cumbia-epics
l1. Fixed a potential crash when unset source is called within an update within a listener's onUpdate
    method. Files: cumonitor.cpp. Function CuMonitor::onResult creates a copy of the listeners list
    before iterating.
l2. Removed prints.

v1.0.2
a. cumbia-qtcontrols
   a1. QuCircularGauge/QuCircularGaugeBase: fixes infinite loops in cache updates with certain property values (e.g. min = max)
   a2. QuCircularGauge/QuCircularGaugeBase: disable cache regeneration while setting properties in QuCircularGauge::m_configure
       by dint of the new QuCircularGaugeBase::setCacheRegenerationDisabled
   a3. QuCircularGaugeBase: widget is updated only if value actually changes (QuCircularGauge::setValue)
   a4. QuCircularBase::setValue optimization: if needle angle change is less than one degree animation is disabled (saves CPU time)

b. qumbia-apps/cumbiareader test app: fixed setOptions/setSource call order

c. created branch_1.0

v1.0.1
a. cumbia-tango
   a1. properties are delivered at configuration time even though the attribute value cannot be read
   a2. removed printf from CuWriteActivity.execute

b. cumbia-qtcontrols
   b1. QuButton: CuControlsUtils.initObjects is not called if data has no w_value key (this avoids pointless error
       message from CuVariant.toStringVector)
   b2. QuCheckBox: fixed bug preventing successful write operations
   b3. CuContextMenuActionsPlugin_I added order() method to interface to allow ordering actions in contextual menus
   b4. QuCircularGaugeBase: label is displayed by default and its size calculation has been automated for optimal size

c. qumbia-plugins
   c1. Let WidgetStdContextMenuActions implement the order() method from CuContextMenuActionsPlugin_I interface

v1.0.0 First release of the library
