
# cumbia read command line client

## Introduction
    The qumbia-reader (cumbia read) application is a command line tool to read sources from different engines. EPICS, Tango and random modules are supported.

## Features

### Source name auto completion (Tango only, for the time being)
    Install the qumbia-tango-findsrc-plugin from github and the included qumbia-tango-find-src tool
    (instructions in the project page) to obtain the Tango source bash auto completion.

### Formula support
    Formulas can be used through the formula plugin. See the plugin documentation and the example
    section below for more details.

### cumbia-random module support
    Read the cumbia random documentation to correctly provide the reader
    sources that can be used for testing. Specific *cumbia-random* source patterns allow to group threads, specify
    the range of generated data, the generation interval, in milliseconds, and the size.
    It is also possible to specify JavaScript files as sources, wherefrom a custom function supplies data.

### Library internals awareness
    Increase the output detail level to see how threads are grouped, understand how they are grouped
    by means of the cumbia random test features. Set a bound on the number of threads used by timers for polled sources to verify the impact on performance.

### Property mode: get the configuration of the sources
    Source configuration stored somewhere by the system can be obtained (if this is applies to the engine)
    Tango device, attribute and class properties can be fetched from the Tango database as well (requires Tango modules).

### Historical database support (Tango hdb++)
    If both the hdbextractor library [https://github.com/ELETTRA-SincrotroneTrieste/hdbextractor] and the cumbia-historicaldb
    [https://github.com/ELETTRA-SincrotroneTrieste/cumbia-historicaldb] module are installed, cumbia-reader can access the
    hdb++ historical database for Tango and display data for a given a source name and a date time interval.
    Additionally, data can be saved on a file in the comma separated value format (CSV).
    See the dedicated section below.

### Tune application output
    The command line output can be tuned in terms of

      -  detail level (low, medim, high and debug)
      -  format of numbers (printf style)
      -  length of displayed data for arrays

## Usage
    cumbia installation provides two shortcuts to launch the qumbia-reader application:

        cumbia read: read once or n times the specified source(s)
        cumbia monitor: indefinitely monitor the specified source(s) until a key is pressed.
                        The latter, executes qumbia-reader --monitor

    Started without options (equal to –help), the tool prints a summary of its functions
    The list of sources ensue. The implementation supports Tango, EPICS and cumbia-random sources.
    For the latter, the random:// prefix is required. It is recommended to read the the cumbia random
    module documentation to learn about the required syntax for the sources.

### Read
    Simply call cumbia read followed by the list of sources. Sources from different engines can be mixed.
    By default, one reading is performed, unless –x is specified:

        $ cumbia read test/device/1/double_scalar giacomo:ai1 random://rnd/1/0/10

    Output:
        $ cumbia read inj/diagnostics/rtbpm_inj.01//GetHorPos[0,1000] --truncate=8 --3 --format="%.4f"

    Output of last command:
        inj/diagnostics/rtbpm_inj.01->GetHorPos(0,1000): [12:12:23+0.716406] [double,1000] { -0.0228,-0.0091,-0.0158,-0.0180,-0.0232,-0.0160,-0.0124, ..., -0.0178 }
        inj/diagnostics/rtbpm_inj.01->GetHorPos(0,1000): [12:12:24+0.883161] [double,1000] { -0.0190,-0.0145,-0.0172,-0.0174,-0.0173,-0.0198,-0.0131, ..., -0.0157 }
        inj/diagnostics/rtbpm_inj.01->GetHorPos(0,1000): [12:12:25+0.885003] [double,1000] { -0.0132,-0.0187,-0.0174,-0.0091,-0.0112,-0.0142,-0.0135, ..., -0.0129 }

    Note
        In order to be auto completed and easily understood by the console without escape characters, Tango commands
        can be written in the form:
            tango/device/name//command_name[arg1,arg2]
        instead of the classical syntax
            tango/device/name->command_name(arg1,arg2)
        that would require inverted commas:
            $ cumbia read "inj/diagnostics/rtbpm_inj.01->GetHorPos(0,1000)"

        Both forms are accepted, but auto completion adopts the first syntax.

### Monitor
    Simply replace cumbia read with cumbia monitor to start monitoring one or more sources.
    Interrupt the process pressing any key.

### Read (or monitor) and show more details
    Output levels can be tuned with the –l=normal, –l=medium and –l=high.
    The number of details increases, up to the –l=debug, that prints the whole data structure
    passed from the lower layer to the application (the CuData bundle contents)

### Read sources configuration only
    With the –property option it is possible to read the configuration of the sources: upper, lower bounds,
    alarm and warning thresholds, data format, measurement units, and so on:
        $ cumbia read test/device/1/double_scalar giacomo:ai1 --property

### Read the Tango database
    Domain search: src must end with wildcard:  tango://host/port/doma*
        $ cumbia read  tango://ken:20000/seq*
        $ * tango://ken:20000/seq*: [16:10:42+0.569857] [string,2] { seq,sequencer }

    Search all families under a given domain:
        $ cumbia read tango://ken:20000/sequencer/
        $ * tango://ken:20000/sequencer/: [16:27:33+0.470669] [string,3] { fermi,ps,test }
    Search all families under a given domain, with wildcard:
        $ cumbia read tango://ken:20000/sequencer/fe*
        $ * tango://ken:20000/sequencer/fe*: [16:29:02+0.798002] [string,1] { fermi }

    Search all members under a given domain/family
        $ cumbia read tango://ken:20000/sequencer/fermi/
        $ * tango://ken:20000/sequencer/fermi/: [16:30:11+0.886962] [string,2] { test.01,test.02 }
    Search all members under a given domain/family, with wildcard:
        $ cumbia read tango://ken:20000/sequencer/test/s*a*
        $ * tango://ken:20000/sequencer/test/s*a*: [16:31:42+0.568593] [string,3] { scan1d-test.01,stats-01,stats-02 }

    Get a free property from an object in the database
        $ cumbia read tango://ken:20000/#Sequencer#TestList
        $ * tango://ken:20000/#Sequencer#TestList: [16:40:17+0.056525] [string,3] { seq/test/launch_super,seq/test/launch_a,seq/test/launch_b }

    Get the list of attributes of a device
        $ cumbia read tango://ken:20000/test/device/1/
        $ * tango://ken:20000/test/device/1/: [16:44:02+0.281213] [string,62] { ampli,boolean_scalar,double_scalar,double_scalar_rww,double_scalar_w,...

    Get device properties
        $ cumbia read "tango://ken:20000/test/device/1(description, helperApplication,values)"
        $  * tango://ken:20000/test/device/1(description, helperApplication,values) [11:32:55+0.426527]
           - tango://ken:20000/test/device/1
             description               --> This is a Tango Test device with ,many interesing attributes and commands
             helperApplication         --> atkpanel
             values                    --> 10,20,30,40,50

    Get one attribute property
        $ cumbia read cumbia read "tango://hokuto:20000/test/device/1/double_scalar(values)"
        $ * tango://hokuto:20000/test/device/1/double_scalar(values) [11:35:45+0.346103]
          - tango://hokuto:20000/test/device/1
            values                    --> 10.1,10.2,10.3,12.0,16.2,80.12,100.1,200.8

    Get multiple attribute properties
        $ cumbia read "tango://hokuto:20000/test/device/1/double_scalar(min_value,max_value,min_alarm,max_alarm,format)"
        $ * tango://hokuto:20000/test/device/1/double_scalar(min_value,max_value,min_alarm,max_alarm,format) [11:43:02+0.779032]
          - tango://hokuto:20000/test/device/1
            format                    --> %2.3f
            max_alarm                 --> 200
            max_value                 --> 255
            min_alarm                 --> -200
            min_value                 --> -255
         -------------------------------------------------

    List all properties of a given class
        $ cumbia read "tango://hokuto:20000/TangoTest(*)"
        * tango://hokuto:20000/TangoTest(*) [12:02:44+0.146309]
          -
          - class: TangoTest
          - pattern: "TangoTest(*)"
          - value: Csoglia,cvs_location,cvs_tag,Description,doc_url,helperApplication_old,InheritedFrom,ProjectTitle
          - tango host: hokuto:20000
    Fetch class properties
        $ cumbia read "tango://hokuto:20000/TangoTest(ProjectTitle,Description)"
        $ * tango://hokuto:20000/TangoTest(ProjectTitle,Description) [12:08:04+0.329729]
          -
            ProjectTitle              --> TANGO Device Server for testing generic clients
            Description               --> A device to test generic clients. It offers a "echo" like command for each TANGO data type (i.e. each command returns an exact copy of <argin>).


### Read from the Tango historical database (hdb++)
    Install hdbextractor library from https://github.com/ELETTRA-SincrotroneTrieste/hdbextractor
    Install the cumbia-historicaldb module from https://github.com/ELETTRA-SincrotroneTrieste/cumbia-historicaldb

    Display data from the database
        $ cumbia read "hdb://tango_host:20000/a/power_supply/ps_a/current(2019-11-18 16:00:59,2019-11-20 16:00:59)"
    Note 1: the quotation marks are required due to parentheses enclosing the time interval.
    Note 2: hdb:// domain prefix is recommended in order to correctly route the source to the hdb++ engine
    Note 3: pay attention to the exact syntax required in the date interval expression

    Output database results on a file
        $ cumbia read  --db-output-file=current.csv "hdb://srv-tango-srf.fcs.elettra.trieste.it:20000/lh/power_supply/psb_lh.01/current(2019-11-18 16:00:59,2019-11-20 16:00:59)"
    The CSV file will output, for each source:
    - one line with the source name, the data type (e.g. double, int, uint, string, bool), the write mode (ro, rw), the
      data format (scalar, vector) and the specified date/time interval
    - for each timestamp, a comma separated row in the form "yyyy-MM-dd hh:mm:ss,value[0],value[1], ..., value[N].
      For scalar data, the row is reduced to the form "yyyy-MM-dd hh:mm:ss,value"


### cumbia-random sources
    Read the cumbia-random documentation for further details.
    (https://elettra-sincrotronetrieste.github.io/cumbia-libs/html/cumbia-random/html/index.html)
    Some examples follow.

    Read a randomly generated scalar value
        $ cumbia read random://one/random/number/1/0/100/one_r

    Read a randomly generated vector of 3 values between -100 and 100
        $ cumbia read random://a/random/array/3/-100/100/array_3

    Monitor a randomly generated vector of 3 values between -10 and +10 with a period of one second
        cumbia monitor random://one/random/array/3/-10/10/monitor_a_3

    Monitor three randomly generated vectors of 3 values each, with a period of one second
        cumbia monitor random://a/random/array/3/-10/10/a_3  random://b/random/array/3/-12/12/b_3 random://c/random/array/3/-100/100/c_3

    Thread grouping
        The cumbia-random module takes the first section of the source string delimited by '/' to determine how to group number generator threads together. Add the –l=high
        option to get even more detailed information while reading:
            $ cumbia read random://th1/scalar/1/-10.0/10.2/r1  random://th2/array/2/0.0/10.0/r2  random://th1/array/3/-10.0/10.0/r3 --l=high

    JavaScript generated data
        A cumbia-random source can specify a JavaScript file (name ending in *.js) as data provider. The pattern for the source must be:
        random://anything/you/want/file://path/to/file.js/SIZE/MIN/MAX[/PERIOD]/label
        file.js will be passed the four arguments given in the source name (period is optional, default is 1 second)
        plus two additional parameters: the number of calls made to the function up to that moment and the value from
        the last call.
        For example:
            $ cumbia monitor  random://file://js_functions/sin.js/100/-10/10/sin_f

### Read from a websocket server
    Reading from a websocket server is an option excluding all other engines (Tango, EPICS), that will be disabled,
    so that the source syntax is allowed to remain the same.
    The websocket server is a proxy to the real engines that allows cumbia, web, and mobile apps to exchange
    data with control systems without having neither their specific libraries installed nor access to the field.

    For the examples below to work, the cumbia-websocket-proxy-server must be listening on the port 12702.
    If you need cumbia-websocket-proxy-server, check it out from
       https://github.com/ELETTRA-SincrotroneTrieste/cumbia-websocket-proxy-server

    The required parameter is --ws-url=ws://websocket-url:PORT . The only active engine will be cumbia-websocket
    Example read:
            $ cumbia read --ws-url=ws://localhost:12702 tango://hokuto:20000/test/device/1/double_scalar
    Example monitor:
            $ cumbia read --ws-url=ws://localhost:12702 tango://hokuto:20000/test/device/1/double_scalar -m


